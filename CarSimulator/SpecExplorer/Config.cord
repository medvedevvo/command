// This is a Spec Explorer coordination script (Cord version 1.0).
// Here is where you define configurations and machines describing the
// exploration to be performed.

/// Contains actions of the model, bounds, and switches.
config Main 
{
    action abstract static void COMPort.create_obj(string port_name);
    action abstract static void COMPort.open(string port_name);
    action abstract static void COMPort.close(string port_name);
    action abstract static void COMPort.send(string str);

    switch StepBound = 128;
    switch PathDepthBound = 128;
    switch TestClassBase = "vs";
    switch GeneratedTestPath = "..\\SpecExplorer.TestSuite";
    switch GeneratedTestNamespace = "SpecExplorer.TestSuite";
    switch TestEnabled = false;
    switch ForExploration = false;
}


/// This configuration provides a domain for parameter in the previous one. 
config ParameterCombination: Main 
{
    action abstract static void COMPort.create_obj(string port_name)
        where port_name in {"COM28", "COM29"};    
    action abstract static void COMPort.open(string port_name)
        where port_name in {"COM28"}; 
    action abstract static void COMPort.close(string port_name)
        where port_name in {"COM28"}; 
    action abstract static void COMPort.send(string str)
        where str in {"", "Test", @"Test:\nHello world!"}; 
}

machine ComPortModelProgram() : Main where ForExploration = true
{
    construct model program from ParameterCombination where scope = "SpecExplorer.ComPortModelProgram" 
}

machine OpenCloseScenario() : Main where ForExploration = true
{
    //(create_obj({"COM28", "COM29"}); OpenResponse){2};
    //create_obj("COM29"); 
    (open)*;
    //(open(); OpenResponse){1};
    //open();
    (send)*;
    //send("Test: Hello world!");
    //(close(); CloseResponse){1};
    (close)*;
    //close();
    //(open; send(_); close)*
}

machine SlicedOpenCloseModelProgram() : Main where ForExploration = true
{
    OpenCloseScenario || ComPortModelProgram
}

machine ComPortTestSuite() : Main where ForExploration = true, TestEnabled = true
{
    construct test cases where strategy = "ShortTests" //AllowUndeterminedCoverage = true 
    for SlicedOpenCloseModelProgram()
}
